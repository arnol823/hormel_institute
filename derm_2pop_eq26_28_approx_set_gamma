% epidermis 2 population based on equations 26-28 from colon stem cell
% paper 
% updated with gamma value

% Load the dataset
data = readtable('labeled_per_1000_nuclei_with_error.csv');

% Extract the time vector and population data as {numerical arrays}
t_data = data{:, 1}; % Time vector
% column 2 is the number of mice measurements for each data point
N_0 = data{:, 3}; % Population data for N_0 - Number_labeled_Basal
% column 4 is error
N_1 = data{:, 5}; % Population data for N_1 - Number_labeled_Suprabasal 
% column 6 is error

% Calculate time step differences
h = diff(t_data);

% set gamma value
gamma = 1/28; % life length of epidermis cells is approximately 4 weeks 

%% N_0 Population
num_points = length(N_0) - 1;

N0_matrixA = zeros(num_points, 2);
N0_matrixB = zeros(num_points, 1);

for i = 1:num_points
    N0_matrixA(i, :) = [h(i) * N_0(i), -h(i) * N_0(i)^2]; 
    N0_matrixB(i) = N_0(i+1) - N_0(i); 
end

A = N0_matrixA;
b = N0_matrixB;
xhat = lsqnonneg(A, b);  % Use lsqnonneg to ensure non-negative constraints
alpha_minus_alpha2 = xhat(1)
k_0 = xhat(2)

N_0_plot_values = zeros(num_points, 1); 
for i = 1:num_points
    N_0_plot_values(i) = N_0(i) + h(i) * (alpha_minus_alpha2) * N_0(i) - k_0 * N_0(i)^2; 
end

%% N_1 Population

N1_matrixA = zeros(num_points, 3); 
N1_matrixB = zeros(num_points, 1); 

for i = 1:num_points
    N1_matrixA(i, :) = [-h(i) * N_1(i)^2, h(i) * N_0(i), h(i) * N_0(i)^2]; 
    N1_matrixB(i) = N_1(i+1) - N_1(i) + h(i) * gamma * N_1(i); 
end

A = N1_matrixA;
b = N1_matrixB;
xhat = lsqnonneg(A, b);  % Use lsqnonneg to ensure non-negative constraints
k_1 = xhat(1)
alpha2 = xhat(2)
k_0 = xhat(3)

N_1_plot_values = zeros(num_points, 1);
for i = 1:num_points
    N_1_plot_values(i) = N_1(i) + h(i) * (-gamma * N_1(i) - k_1 * N_1(i)^2 + alpha2 * N_0(i) + k_0 * N_0(i)^2); 
end

% Shorten t_data for plotting
t_data1 = t_data(1:end-1);

% Plot all results on the same figure
figure;
hold on;
plot(t_data1, N_0_plot_values, '-b', 'DisplayName', 'Estimated N_0');
plot(t_data1, N_0(1:end-1), 'or', 'MarkerSize', 3, 'DisplayName', 'Original N_0 Data Points');
plot(t_data1, N_1_plot_values, '-g', 'DisplayName', 'Estimated N_1');
plot(t_data1, N_1(1:end-1), 'og', 'MarkerSize', 3, 'DisplayName', 'Original N_1 Data Points');
hold off;

% title('Least Squares Fit for N_0 & N_1 using Euler Method (Equations 26-28)');
title({'Least Squares Fit for $N_0$ \& $N_1$ using Euler Method (Equations 26-28)', ...
 '$\frac{dN_0}{dt} = (\alpha - \alpha_2) N_0 - k_0 N_0^2,\quad \frac{dN_1}{dt} = \alpha_2 N_0 + k_0 N_0^2 - \gamma N_1 - k_1 N_1^2$'}, ...
'Interpreter', 'latex');
xlabel('Time');
ylabel('Population');
legend('show');
